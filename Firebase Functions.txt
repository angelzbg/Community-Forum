const functions = require('firebase-functions');
const admin = require('firebase-admin');
admin.initializeApp();


exports.afterRegFunction = functions.auth.user().onCreate((user) => {
    const date = Date.now();
	const userObject = {
		username : user.uid,
        avatar: "none",
        points: 0,
        date : date
    };
    const p1 = admin.database().ref('users/' + user.uid).set(userObject);
    const p2 = admin.database().ref('usernames/' + user.uid.toString().toLowerCase()).set(user.uid);
    return Promise.all([p1, p2]);
});

exports.dbUpdateOnNicknameChange = functions.database.ref('/users/{uid}/username').onUpdate((change, event) => {
    /*Insert bad words filter here*/
    const uid = event.params.uid;
    const promise1 = admin.database().ref('usernames/' + change.before.val().toLowerCase()).remove();
    const promise2 = admin.database().ref('usernames/' + change.after.val().toLowerCase()).set(uid);
    return Promise.all([promise1, promise2]);
});

exports.dbWriteOnFriendRequestChoice = functions.database.ref('/acceptedFriendRequests/{receiverid}/{senderid}').onWrite((change, context) => {
    if (!change.after.exists()) { // do nothing when deleted
        return null;
    }
    const isAccepted = change.after.val(); // true || false
    const receiverid = context.params.receiverid;
    const senderid = context.params.senderid;
    const newChatUUID = receiverid+senderid;

    const promiseDeleteRequest = admin.database().ref('/acceptedFriendRequests/' + receiverid + '/' + senderid).remove();
    const promiseDeleteRequestFinish = admin.database().ref('/friendRequests/' + receiverid + '/' + senderid).remove();

    if(isAccepted) {
        const promiseAccepted1 = admin.database().ref('/friends/' + senderid + '/' + receiverid).set(newChatUUID);
        const promiseAccepted2 = admin.database().ref('/friends/' + receiverid + '/' + senderid).set(newChatUUID);
        const chatData = {
            user1: receiverid,
            user2: senderid
        }
        const promiseNewChatNode = admin.database.ref('/chats/' + newChatUUID).set(chatData);
        return Promise.all([promiseAccepted1, promiseAccepted2, promiseDeleteRequest, promiseDeleteRequestFinish, promiseNewChatNode]);
    } else {
        return Promise.all([promiseDeleteRequest, promiseDeleteRequestFinish]);
    }
});

exports.dbWriteOnFriendRemove = functions.database.ref('/friends/{userid}/{friendid}').onWrite((change, context) => {
    if (!change.after.exists() || change.after.val() !== false) { // do nothing when deleted or created
        return null;
    }
    // now we know that the user is trying to delete a friend (change.after.val() = false)
    const userid = context.params.userid;
    const friendid = context.params.friendid;
    const chatUUID = change.before.val(); // this was the chatUUID before it's change to false

    const promiseDeleteFriends1 = admin.database().ref('/friends/' + userid + '/' + friendid).remove();
    const promiseDeleteFriends2 = admin.database().ref('/friends/' + friendid + '/' + userid).remove();
    const promiseDeleteChat = admin.database().ref('/chats/' + chatUUID).remove();

    return Promise.all([promiseDeleteFriends1, promiseDeleteFriends2, promiseDeleteChat]);
});


exports.dbWriteOnBlock = functions.database.ref('/blocks/{userid}/{blockeduserid}').onWrite(async (change, context) => {
    if (!change.after.exists()) { // do nothing when deleted (unblocked)
        return null;
    }
    // now we know that the user is trying to block another user (change.after.val() = true)
    const userid = context.params.userid;
    const blockeduserid = context.params.blockeduserid;

    // must check if users are friends and write false if so -> the trigger above (dbWriteOnFriendRemove) should do it's job
    const snap = await admin.database().ref('/friends/' + userid + '/' + blockeduserid).once('value');
    if (snap.exists()) { // friendship exists
        return admin.database().ref('/friends/' + userid + '/' + blockeduserid).set(false);
    }
    else { // friendship doesn't exist => do nothing
        return null;
    }
});



exports.dbWriteOnCommunityRequest = functions.database.ref('/communityRequests/{userid}').onWrite((change, context) => {
    if (!change.after.exists()) { // do nothing when deleted
        return null;
    }
    const communityCreator = context.params.userid; // the user trying to create a community
    const requestData = change.after.val();
    const communityName = requestData.name;
    const communityDesciption = requestData.description;
    const communityDate = Date.now();

    /*Insert name and description bad words filter here*/

    const newCommunity = {
        name: communityName,
        creator: communityCreator,
        description: communityDesciption,
        avatar: 'none',
        date: communityDate,
        pinned_post: 'none',
        posts_count: 0,
        users_count: 0
    };

    const communityUUID = admin.database().ref().push().key;

    const promiseCreateCommunity = admin.database().ref('/communities/' + communityUUID).set(newCommunity);
    const promiseCommunityNames = admin.database().ref('/communities_names/' + communityName.toLowerCase()).set(communityUUID);
    const promiseRemoveCreatorPoints = admin.database().ref('/users/' + communityCreator + '/points').transaction(
        (points_value) => {
            return points_value - 500;
        }
    );
    const promiseRemoveRequest = admin.database().ref('/communityRequests/' + communityCreator).remove();


    return Promise.all([promiseCreateCommunity, promiseCommunityNames, promiseRemoveCreatorPoints, promiseRemoveRequest]);
});

exports.dbWriteOnSavedCommunity = functions.database.ref('/saved_communities/{userid}/{communityid}').onWrite((change, context) => {
    const communityUUD = context.params.communityid;
    let value = 0;
    if (!change.after.exists()) { // removing saved community
        value = -1;
    } else { // saving community
        value = 1;
    }
    return admin.database().ref('/communities/' + communityUUD + '/users_count').transaction(
        (users_value) => {
            return users_value + value;
        }
    );
});



exports.dbWriteOnNewPost = functions.database.ref('/posts/{postid}').onWrite((change, context) => {
    const postUUID = context.params.postid;
    const postData = change.after.val();
    const communityUUID = postData.community;
    const authorUUID = postData.author;
    const postDate = postData.date;

    const promisePostByCommunity = admin.database().ref('/posts_by_community/' + communityUUID + '/' + postUUID).set(postDate);
    const promisePostByUser = admin.database().ref('/posts_by_user/' + authorUUID + '/' + postUUID).set(postDate);
    const promiseCommunityPostsCount = admin.database().ref('/communities/' + communityUUID + '/posts_count').transaction(
        (posts_value) => {
            return posts_value + 1;
        }
    );
    return Promise.all([promisePostByCommunity, promisePostByUser, promiseCommunityPostsCount]);
});

exports.dbWriteOnVote = functions.database.ref('/votes/{postid}/{userid}').onWrite((change, context) => {
    const postUUID = context.params.postid;
    const userUUID = context.params.userid;

    let value = 0;
    if(!change.after.exists()) { // removing vote
        value = -1;
    } else { // adding vote
        value = 1;
    }

    const promiseVotesPost = admin.database().ref('/posts/' + postUUID + '/votes').transaction(
        (votes_value) => {
            return votes_value + value;
        }
    );
    const promisePointsUser = admin.database().ref('/users/' + userUUID + '/points').transaction(
        (points_value) => {
            return points_value + value;
        }
    );
    return Promise.all([promiseVotesPost, promisePointsUser]);
});

exports.dbWriteOnComment = functions.database.ref('/comments/{communityid}/{postid}').onWrite((context) => {
    const postUUID = context.params.postid;

    return admin.database().ref('/posts/' + postUUID + '/comments_count').transaction(
        (comments_value) => {
            return comments_value + 1;
        }
    );
});

exports.dbWriteOnAnswer = functions.database.ref('/answers/{communityid}/{postid}/{commentid}/{answerid}').onWrite((context) => {
    const communityUUID = context.params.communityid;
    const postUUID = context.params.postid;
    const commentUUID = context.params.commentid;

    return admin.database().ref('/comments/' + communityUUID + '/' + postUUID + '/' + commentUUID + '/answers_count').transaction(
        (answers_value) => {
            return answers_value + 1;
        }
    );
});